version: "3.5"

########################### NETWORKS
networks:
  t2_proxy:
  backend:
  default:
    driver: bridge

########################### SERVICES
services:
  traefik:
    container_name: traefik
    image: traefik:chevrotin # the chevrotin tag refers to v2.2.x
    restart: unless-stopped

    command:
      - --global.sendAnonymousUsage=false

      ########################### Entrypoints
      - --entryPoints.http.address=:80 # HTTP
      - --entryPoints.https.address=:443 # HTTPS
      - --entryPoints.api.address=:8888 # Dashboard/API

      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22

      ########################### API
      - --api=true
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      # - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499

      ########################### Providers
      - --providers.docker=true

      # Docker server endpoint. Can be a tcp or a unix socket endpoint.
      - --providers.docker.endpoint=unix:///var/run/docker.sock

      # For a given container if no routing rule was defined by a label, it is defined by this defaultRule instead.
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)

      # Expose containers by default in Traefik.
      # If set to false, containers that don't have a traefik.enable=true label will be ignored from the resulting routing configuration.
      - --providers.docker.exposedByDefault=false

      # Defines a default docker network to use for connections to all containers.
      - --providers.docker.network=t2_proxy

      ########################### Additional Configuratino File Paths
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder

      ########################### Certificate Resolution
      # Traefik requires you to define "Certificate Resolvers" in the static configuration, which are responsible for retrieving certificates from an ACME server.
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.dnschallenge=true
      - --certificatesResolvers.dns-cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate

    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8888
        published: 8888
        protocol: tcp
        mode: host
    env_file:
      - ./traefik2/traefik2.env
    volumes:
      # Access to rules such as middleware
      - type: bind
        source: ./traefik2/rules
        target: /rules
        read_only: true
      # Access to the docker API so it can listen to events
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      # Access to the acme.json file for Let's Encrypt
      - type: bind
        source: ./traefik2/acme/acme.json
        target: /acme.json
      # Exposing the logging file
      - type: bind
        source: ./traefik2/traefik.log
        target: /traefik.log
      # Access to shared environment files
      - ./shared:/shared
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      ########################### Entrypoint
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      ########################### Rules
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      ########################### TLS Settings
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      ########################### Middleware
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"
      ########################### Service
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      - "traefik.http.services.traefik-rtr.loadbalancer.server.port=8080"

    restart: always

  db:
    image: mariadb:10.4
    container_name: librenms_db
    command:
      - "mysqld"
      - "--innodb-file-per-table=1"
      - "--lower-case-table-names=0"
      - "--character-set-server=utf8"
      - "--collation-server=utf8_unicode_ci"
    volumes:
      - "./librenms/db:/var/lib/mysql"
    env_file:
      - "./librenms/librenms.env"
    restart: always

  memcached:
    image: memcached:alpine
    container_name: librenms_memcached
    networks:
      - backend
    environment:
      - "TZ=${TZ}"
    restart: always

  redis:
    image: redis:5.0-alpine
    container_name: librenms_redis
    networks:
      - backend
    environment:
      - "TZ=${TZ}"
    restart: always

  rrdcached:
    image: crazymax/rrdcached
    container_name: librenms_rrdcached
    volumes:
      - "./librenms/rrd:/data/db"
      - "./librenms/rrd/rrd-journal:/data/journal"
    networks:
      - backend
    env_file:
      - "./librenms/librenms.env"
    environment:
      - "LOG_LEVEL=LOG_INFO"
      - "WRITE_TIMEOUT=1800"
      - "WRITE_JITTER=1800"
      - "WRITE_THREADS=4"
      - "FLUSH_DEAD_DATA_INTERVAL=3600"
    restart: always

  msmtpd:
    image: crazymax/msmtpd:latest
    container_name: librenms_msmtpd
    networks:
      - t2_proxy
    env_file:
      - "./librenms/msmtpd.env"
    restart: always

  librenms:
    image: librenms/librenms:latest
    container_name: librenms
    domainname: ${DOMAINNAME}
    hostname: librenms
    depends_on:
      - db
      - memcached
      - rrdcached
      - msmtpd
    volumes:
      - "./librenms/data:/data"
    networks:
      - backend
      - t2_proxy
    env_file:
      - "./librenms/librenms.env"
    restart: always
    labels:
      - "traefik.enable=true"
      ##################### HTTPS
      ########################### Entrypoint
      - "traefik.http.routers.librenms-https.entrypoints=https"
      ########################### Rules
      - "traefik.http.routers.librenms-https.rule=Host(`librenms.$DOMAINNAME`)"
      ########################### TLS Settings
      - "traefik.http.routers.librenms-https.tls=true"
      - "traefik.http.routers.librenms-https.tls.certresolver=dns-cloudflare"
      ########################### Middleware
      - "traefik.http.routers.librenms-https.middlewares=chain-no-auth@file"
      ########################### Service
      - "traefik.http.routers.librenms-https.service=librenms-svc"
      - "traefik.http.services.librenms-svc.loadbalancer.server.scheme=http"
      - "traefik.http.services.librenms-svc.loadbalancer.server.port=8000"


  dispatcher:
    image: librenms/librenms:latest
    container_name: librenms_dispatcher
    domainname: ${DOMAINNAME}
    hostname: librenms-dispatcher
    depends_on:
      - librenms
      - redis
    volumes:
      - "./librenms/data:/data"
    networks:
      - backend
    env_file:
      - "./librenms/librenms.env"
    environment:
      - "DISPATCHER_NODE_ID=dispatcher1"
      - "REDIS_HOST=redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=0"
      - "SIDECAR_DISPATCHER=1"
    restart: always

  syslogng:
    image: librenms/librenms:latest
    container_name: librenms_syslog
    hostname: librenms-syslogng
    depends_on:
      - librenms
    ports:
      - target: 514
        published: 514
        protocol: tcp
      - target: 514
        published: 514
        protocol: udp
    volumes:
      - "./librenms/data:/data"
    networks:
      - t2_proxy
    env_file:
      - "./librenms/librenms.env"
    environment:
      - "SIDECAR_SYSLOGNG=1"
    restart: always
